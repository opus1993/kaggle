{"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":76727,"databundleVersionId":9045607,"sourceType":"competition"}],"isInternetEnabled":true,"language":"rmarkdown","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"---\ntitle: \"Mushrooms\"\ndate: '`r Sys.Date()`'\noutput:\n  html_document:\n    number_sections: true\n    fig_caption: true\n    toc: true\n    fig_width: 7\n    fig_height: 4.5\n    theme: cosmo\n    highlight: tango\n    code_folding: hide\n---\n  \n# Introduction  {.tabset .tabset-fade .tabset-pills}\n\nThe goal of this competition is to build classification models to predict which mushroom is edible.\n\nMy notebook serves as a demonstration of some of the possible techniques available to arrive at a solution.  I intend to add to this as I have time available. Your questions and comments are welcome.\n\nIf you fork this on kaggle, be sure to choose the kernel Environment setting for \"Always use latest environment\"\n\nLets dive right in.\n\nThe Kaggle kernels have many of the common r packages built in.  \n\n## Load libraries\n\nIn addition to `tidymodels` we will load the `bonsai` interface to lightgbm.\n\n```{r }\n#| label: setup\n#| warning: false\n#| message: false\n\nif (dir.exists(\"/kaggle\")){\n  path <- \"/kaggle/input/playground-series-s4e8/\"\n\noptions(repos = c(CRAN = \"https://packagemanager.posit.co/cran/2021-03-22\"))\n# install.packages(\"vip\", quiet = TRUE)\n    \ncores <- future::availableCores()\n\n} else {\n  path <- stringr::str_c(here::here(\"data\"),\"/\")\n\ncores <- future::availableCores(omit = 1)\n}\n\n \nsuppressPackageStartupMessages({\nlibrary(tidyverse, quietly = TRUE) # metapackage of all tidyverse packages\nlibrary(tidymodels) # metapackage see https://www.tidymodels.org/\nlibrary(bonsai)\n})\n\ntidymodels_prefer()\n\noptions(tidymodels.dark = TRUE)\n\ntheme_set(cowplot::theme_minimal_grid())\n\n```\n\n\n## Load Data\n\n```{r }\n#| label: load data\n#| warning: false\n#| message: false\n\n\ntrain_spec <- cols(\n  id = col_double(),\n  class = col_character(),\n  `cap-diameter` = col_double(),\n  `cap-shape` = col_character(),\n  `cap-surface` = col_character(),\n  `cap-color` = col_character(),\n  `does-bruise-or-bleed` = col_logical(),\n  `gill-attachment` = col_character(),\n  `gill-spacing` = col_character(),\n  `gill-color` = col_character(),\n  `stem-height` = col_double(),\n  `stem-width` = col_double(),\n  `stem-root` = col_character(),\n  `stem-surface` = col_character(),\n  `stem-color` = col_character(),\n  `veil-type` = col_character(),\n  `veil-color` = col_character(),\n  `has-ring` = col_logical(),\n  `ring-type` = col_character(),\n  `spore-print-color` = col_character(),\n  habitat = col_character(),\n  season = col_character()\n)\n\n\ncompetition_spec <- cols(\n  id = col_double(),\n  `cap-diameter` = col_double(),\n  `cap-shape` = col_character(),\n  `cap-surface` = col_character(),\n  `cap-color` = col_character(),\n  `does-bruise-or-bleed` = col_logical(),\n  `gill-attachment` = col_character(),\n  `gill-spacing` = col_character(),\n  `gill-color` = col_character(),\n  `stem-height` = col_double(),\n  `stem-width` = col_double(),\n  `stem-root` = col_character(),\n  `stem-surface` = col_character(),\n  `stem-color` = col_character(),\n  `veil-type` = col_character(),\n  `veil-color` = col_character(),\n  `has-ring` = col_logical(),\n  `ring-type` = col_character(),\n  `spore-print-color` = col_character(),\n  habitat = col_character(),\n  season = col_character()\n)\n\n\n\npreprocessor <- function(dataframe) {\n\ndataframe <- dataframe %>%\n    janitor::clean_names() %>%\n    mutate(across(c(where(is.character)), ~ as.factor(.x))) \n\nreturn(dataframe)\n}\n\nraw_df <- read_csv(str_c(path, \"train.csv\"),\n                   col_types = train_spec,\n                   show_col_types = FALSE) %>%\n          preprocessor() \n\ncompetition_df <- read_csv(str_c(path, \"test.csv\"),\n                   col_types = competition_spec,\n                   show_col_types = FALSE)  %>% \n  preprocessor() \n\nall_df <-\n    bind_rows(raw_df %>% mutate(source = \"train\"),\n            competition_df %>% mutate(source = \"test\"))\n\ntrain_df <- all_df %>% \n  filter(source == \"train\") %>% \n  select(-source) \n\ncompetition_df <- all_df %>% \n  filter(source == \"test\") %>% \n  select(-source, -class)\n\nfeatures <- train_df %>%\n  select(-id, -class) %>%\n  names()\n\ntrain_df <- train_df %>% \n  distinct(pick(all_of(features)), .keep_all = TRUE)\n\nnom_features <- train_df %>%\n  select(all_of(features)) %>%\n  select(where(is.character), where(is.factor)) %>%\n  names() \n\nlogical_features <- train_df %>%\n  select(all_of(features)) %>%\n  select(where(is.logical)) %>%\n  names() \n\nnum_features <- train_df %>%\n  select(all_of(features)) %>%\n  select(where(is.numeric)) %>%\n  names()\n\nbundle_split <- initial_split(train_df, prop = 0.95, strata = class)\nbundle_train <- training(bundle_split)\nbundle_test <- testing(bundle_split)\n\n\n```\n\nNominal features:\n\n`r nom_features`\n\nNumeric features: \n\n`r num_features`\n\nSize of the combined train and competition datasets:\n\n`r nrow(all_df)`\n\nSize of the split made available to machine learning\n\n`r nrow(bundle_train)`\n\n\n# EDA {.tabset .tabset-fade .tabset-pills}\n\n## Numeric features\n\nConsider where features require univariate transformation, or clipping outliers.\n```{r}\n#| label: numeric\n#| warning: false\n#| message: false\n#| fig.height: 6\n#| fig.width: 6\n\ntrain_df %>% \n  select(all_of(num_features), class ) %>% \n  pivot_longer(-class,\n    names_to = \"metric\",\n    values_to = \"value\"\n  ) %>%\n  ggplot(aes(value, fill = class)) +\n  geom_density(show.legend = FALSE ) +\n   facet_wrap(vars(metric), scales = \"free\", ncol = 1) +\n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        plot.title.position = \"plot\") +\n  labs(color = NULL, fill = \"Class\",\n       title = \"Numeric Feature Univariate Distributions\",\n       caption = \"Data: Kaggle.com | Visual: Jim Gruman\")\n\n```\n\n\n## Nominal features\n\n```{r}\n#| label: nominal\n#| warning: false\n#| message: false\n#| fig.height: 18\n#| fig.width: 6\n\n\nif(length(nom_features) >0){\n\ntrain_df %>% \n  select(all_of(nom_features), class) %>% \n  mutate(across(nom_features, fct_lump_n,n = 10, other_level = 'other')) %>%\n  pivot_longer(-class,\n    names_to = \"metric\",\n    values_to = \"value\"\n  ) %>%\n  ggplot(aes(y = value, fill = class)) +\n  geom_bar() +\n#  scale_x_discrete(guide = guide_axis(n.dodge = 3)) +\n  scale_x_continuous(n.breaks = 3) +\n   facet_wrap(vars(metric), scales = \"free\", ncol = 2) +\n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n       legend.position = \"bottom\") +\n  labs(title = \"Nominal Feature Counts\",\n       fill = \"Class\",\n       caption = \"Data: Kaggle.com | Visual: Jim Gruman\")\n}\n\n```\n\n## Counts of Missingness\n                  \n```{r}\n#| label: counts of missingness\n\ntrain_df %>% \n  summarize(across(all_of(features), function(x) sum(is.na(x)))) %>% \n  pivot_longer(everything(),\n              names_to = \"feature\",\n              values_to = \"Count of Missing\") %>% \n                   knitr::kable()\n```\n\n## Counts of Distinct\n               \n```{r}\n#| label: counts of distinct\n               \ntrain_df %>% \n  summarize(\n    across(all_of(features), n_distinct)\n  ) %>%\n  pivot_longer(everything(),\n               names_to = \"feature\",\n               values_to = \"Count of distinct\") %>% \n                   knitr::kable()\n               \n```\n\n## Duplicated\n\nIs this competition transaction already in the training data with a correct label?\n\n```{r}\n#| label: duplicates\n#| warning: false\n#| message: false\nall_df %>%\n    select(all_of(features), source) %>% \n    group_by_at(features) %>%\n    mutate(num_dups = n(),\n           dup_id = row_number()) %>%\n    ungroup() %>%\n    group_by(source) %>%\n    mutate(is_duplicated = dup_id > 1) %>%\n    count(is_duplicated) %>% \n                   knitr::kable()\n               \n\n```\n                   \n\n\n\n## Target\n\n```{r}\n#| label: outcome \n#| warning: false\n#| message: false\n#| fig.width: 6\n\n\nbundle_train %>% \n  summarize(outcome_sum = n(),\n            .by = class) %>%\n  arrange(desc(outcome_sum)) %>%\n  mutate(prop = outcome_sum / nrow(bundle_train)) %>%\n  mutate(ypos = cumsum(prop) - 0.5 * prop) %>%\n  ggplot(aes(x = \"\", y = prop, fill = class)) +\n  geom_bar(stat = \"identity\", width = 1, show.legend = FALSE) +\n  geom_text(aes(y = ypos, label = paste0(class\n                                  ,\"\\n\",round(prop,2)*100,\"%\")),\n            color = \"white\",\n            nudge_x = 0.3,\n            size = 3) +\n  coord_polar(\"y\", start = 0) +\n  theme_void() + \n  labs(title = \"Class\",\n       caption = \"Data: Kaggle.com | Visual: Jim Gruman\")\n\n```\n                              \n           \n                \n# Machine Learning {.tabset .tabset-fade .tabset-pills}\n\n\n## Recipe\n\n```{r}\n#| label: recipe\n                   \nrec <- recipe(\n    \n    formula(paste0(\"class ~ \", \n               str_c(features,  collapse = \" + \"))),\n    data = bundle_train\n  ) %>% \n  step_novel(all_nominal_predictors())            \n                   \n                   \nfolds <- vfold_cv(bundle_train, \n                  v = 3,\n                  repeats = 1,\n                  strata = class)    \n                   \nctrl <- finetune::control_sim_anneal(     \n     verbose = FALSE,\n     verbose_iter = TRUE,\n     parallel_over = \"everything\",\n     event_level = \"second\",\n     save_pred = FALSE,\n     save_workflow = FALSE)                   \n                                     \n```\n\n\n\n## Lightgbm\n\n```{r}\n#| label: lgbm\n\n\nboost_tree_lgbm_spec <- \n  boost_tree(\n    trees = 100L,\n   tree_depth = tune(),\n   learn_rate =  tune(),\n   min_n = tune(),\n   loss_reduction = 0\n  ) %>% \n  set_engine(engine = \"lightgbm\",\n             is_unbalance = TRUE,\n             num_leaves = tune(),\n             num_threads = cores\n             ) %>%\n  set_mode(mode = \"classification\") \n                   \nwf <- workflow(rec,\n               boost_tree_lgbm_spec) \n\nparam <- wf %>%\n   extract_parameter_set_dials() %>%\n   recipes::update(\n      min_n = min_n(range = c(10,60)),\n      tree_depth = tree_depth(range = c(5,50)),\n      learn_rate = learn_rate(range = c(-1,-2)),\n      num_leaves = num_leaves(range = c(20,300))\n   ) %>%\n   dials::finalize(raw_df)                 \n\nburnin <- tune_grid(\n  wf,\n  grid = 4,\n  resamples = folds,\n  control = ctrl,\n  metrics = metric_set(mcc, accuracy),\n  param_info = param)\n\nlgbm_rs <- finetune::tune_sim_anneal(\n  wf,\n  resamples = folds,\n  iter = 2,\n  initial = burnin,\n  control = ctrl,\n  metrics =  metric_set(mcc, accuracy),\n  param_info = param) \n\nshow_best(lgbm_rs, metric = \"mcc\")  \n\nautoplot(lgbm_rs)\n\ncollect_metrics(lgbm_rs) %>% \n  filter(.metric == \"mcc\") %>% \n  mutate(.config = fct_reorder(.config, mean)) %>% \n  ggplot(aes(mean, .config)) +\n  geom_point() +\n  geom_errorbarh(aes(xmin = mean - std_err, xmax = mean + std_err)) +\n  labs(title = \"MCC across resample folds with std_err\")\n                   \n\n```\n                   \n# Submission\n                   \n```{r}\n#| label: submission\n#| warning: false\n#| message: false\n\nhighest_mcc <-   select_best(lgbm_rs, metric = \"mcc\")                 \n                   \nfinal_lgbm <- wf %>%\n    finalize_workflow(highest_mcc) \n\nlast_fit(\n  final_lgbm,\n  bundle_split\n) %>%\n  collect_metrics()\n\nclassification_fit <- final_lgbm %>%\n                        fit(bundle_train) \n\n\nsubmit_df <-  augment(classification_fit, competition_df, type = \"response\") %>%\n       select(id, class = .pred_class)\n\nhead(submit_df)  %>% \n     knitr::kable()      \n\nsubmit_df  %>% \n  write_csv(\"submission.csv\")\n```    ","metadata":{"_uuid":"71d436de-fcb0-42a9-bfbf-48b282512e37","_cell_guid":"398336e2-4193-4737-98eb-5033d41cf3ea","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}