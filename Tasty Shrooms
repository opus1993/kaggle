---
title: "Mushrooms"
date: '`r Sys.Date()`'
output:
  html_document:
    number_sections: true
    fig_caption: true
    toc: true
    fig_width: 7
    fig_height: 4.5
    theme: cosmo
    highlight: tango
    code_folding: hide
---
  
# Introduction  {.tabset .tabset-fade .tabset-pills}

The goal of this competition is to build classification models to predict which mushroom is edible.

My notebook serves as a demonstration of some of the possible techniques available to arrive at a solution.  I intend to add to this as I have time available. Your questions and comments are welcome.

If you fork this on kaggle, be sure to choose the kernel Environment setting for "Always use latest environment"

Lets dive right in.

The Kaggle kernels have many of the common r packages built in.  

## Load libraries

In addition to `tidymodels` we will load the `bonsai` interface to lightgbm.

```{r }
#| label: setup
#| warning: false
#| message: false

if (dir.exists("/kaggle")){
  path <- "/kaggle/input/playground-series-s4e8/"

options(repos = c(CRAN = "https://packagemanager.posit.co/cran/2021-03-22"))
# install.packages("vip", quiet = TRUE)
    
cores <- future::availableCores()

} else {
  path <- stringr::str_c(here::here("data"),"/")

cores <- future::availableCores(omit = 1)
}

 
suppressPackageStartupMessages({
library(tidyverse, quietly = TRUE) # metapackage of all tidyverse packages
library(tidymodels) # metapackage see https://www.tidymodels.org/
library(bonsai)
})

tidymodels_prefer()

options(tidymodels.dark = TRUE)

theme_set(cowplot::theme_minimal_grid())

```


## Load Data

```{r }
#| label: load data
#| warning: false
#| message: false


train_spec <- cols(
  id = col_double(),
  class = readr::col_factor(),
  `cap-diameter` = col_double(),
  `cap-shape` = col_character(),
  `cap-surface` = col_character(),
  `cap-color` = col_character(),
  `does-bruise-or-bleed` = col_logical(),
  `gill-attachment` = col_character(),
  `gill-spacing` = col_character(),
  `gill-color` = col_character(),
  `stem-height` = col_double(),
  `stem-width` = col_double(),
  `stem-root` = col_character(),
  `stem-surface` = col_character(),
  `stem-color` = col_character(),
  `veil-type` = col_character(),
  `veil-color` = col_character(),
  `has-ring` = col_logical(),
  `ring-type` = col_character(),
  `spore-print-color` = col_character(),
  habitat = col_character(),
  season = col_character()
)


competition_spec <- cols(
  id = col_double(),
  `cap-diameter` = col_double(),
  `cap-shape` = col_character(),
  `cap-surface` = col_character(),
  `cap-color` = col_character(),
  `does-bruise-or-bleed` = col_logical(),
  `gill-attachment` = col_character(),
  `gill-spacing` = col_character(),
  `gill-color` = col_character(),
  `stem-height` = col_double(),
  `stem-width` = col_double(),
  `stem-root` = col_character(),
  `stem-surface` = col_character(),
  `stem-color` = col_character(),
  `veil-type` = col_character(),
  `veil-color` = col_character(),
  `has-ring` = col_logical(),
  `ring-type` = col_character(),
  `spore-print-color` = col_character(),
  habitat = col_character(),
  season = col_character()
)

clean_text_field <- function(textcolumn) {
  case_when(
      str_detect({{textcolumn}}, ".*[0-9].*") ~ NA,
      str_length({{textcolumn}}) > 1 ~ NA,
      .default = {{textcolumn}}
    )
}

preprocessor <- function(dataframe) {

dataframe <- dataframe %>%
    janitor::clean_names() %>%
    
    mutate(count_NA = factor(rowSums(is.na(.)))) %>%
  
    mutate(across(c(where(is.character)), ~ clean_text_field(.x))) %>%

    unite(col = textstring, where(is.character), na.rm = TRUE, sep = "", remove = FALSE) %>%
    
    mutate(across(c(where(is.character)), ~ as.factor(.x))) 

return(dataframe)
}

raw_df <- read_csv(str_c(path, "train.csv"),
                   col_types = train_spec,
                   show_col_types = FALSE) %>%
          preprocessor() 

tst_df <- read_csv(str_c(path, "test.csv"),
                   col_types = competition_spec,
                   show_col_types = FALSE)  %>% 
  preprocessor() 

all_df <-
    bind_rows(raw_df %>% mutate(source = "train"),
              tst_df %>% mutate(source = "test"))

train_df <- all_df %>% 
  filter(source == "train") %>% 
  select(-source) 

competition_df <- all_df %>% 
  filter(source == "test") %>% 
  select(-source, -class)

features <- train_df %>%
  select(-id, -class) %>%
  names()

train_df <- train_df %>% 
  distinct(pick(all_of(features)), .keep_all = TRUE)

nom_features <- train_df %>%
  select(all_of(features)) %>%
  select(where(is.character), where(is.factor)) %>%
  names() 

logical_features <- train_df %>%
  select(all_of(features)) %>%
  select(where(is.logical)) %>%
  names() 

num_features <- train_df %>%
  select(all_of(features)) %>%
  select(where(is.numeric)) %>%
  names()

bundle_split <- initial_split(train_df, prop = 0.95, strata = class)
bundle_train <- training(bundle_split)
bundle_test <- testing(bundle_split)


```

Nominal features:

`r nom_features`

Numeric features: 

`r num_features`

Logical features: 

`r logical_features`


Size of the combined train and competition datasets:

`r nrow(all_df)`

Size of the split made available to machine learning

`r nrow(bundle_train)`


# EDA {.tabset .tabset-fade .tabset-pills}

## Numeric features

Consider where features require univariate transformation, or clipping outliers.
```{r}
#| label: numeric
#| warning: false
#| message: false
#| fig.height: 6
#| fig.width: 6

train_df %>% 
  select(all_of(num_features), class ) %>% 
  pivot_longer(-class,
    names_to = "metric",
    values_to = "value"
  ) %>%
  ggplot(aes(value, fill = class)) +
  geom_histogram(show.legend = FALSE, bins = 200) +
   facet_wrap(vars(metric), scales = "free", ncol = 1) +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        plot.title.position = "plot") +
  labs(color = NULL, fill = "Class",
       title = "Numeric Feature Univariate Distributions",
       caption = "Data: Kaggle.com | Visual: Jim Gruman")

```


## Nominal features

Explore the distribution of outcome class by factor level, and the factor levels that exist in test that do not exist in training.


```{r}
#| label: nominal
#| warning: false
#| message: false
#| fig.height: 18
#| fig.width: 6


if(length(nom_features) >0){

all_df %>% 
  select(all_of(nom_features), class) %>% 
  mutate(across(nom_features, fct_lump_n,n = 10, other_level = 'other')) %>%
  pivot_longer(-class,
    names_to = "metric",
    values_to = "value"
  ) %>%
  
  summarise(n = n(),
            .by = c(class, metric, value)) %>%
      
  mutate(value = tidytext::reorder_within(value, n, metric)) %>%
    
  ggplot(aes(x = n, y = value, fill = class)) +
  geom_col() +
  tidytext::scale_y_reordered() +
  scale_x_continuous(n.breaks = 3, guide = guide_axis(n.dodge = 2))  +
  facet_wrap(vars(metric), scales = "free", ncol = 2) +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
       legend.position = "bottom") +
  labs(title = "Nominal Feature Counts",
       fill = "Class",
       caption = "Data: Kaggle.com | Visual: Jim Gruman")

}

```

## Logical features

```{r}
#| label: logical
#| warning: false
#| message: false
#| fig.height: 6
#| fig.width: 6


if(length(logical_features) >0){

train_df %>% 
  select(all_of(logical_features), class) %>% 
  pivot_longer(-class,
    names_to = "metric",
    values_to = "value"
  ) %>%
  ggplot(aes(y = value, fill = class)) +
  geom_bar() +
  scale_x_continuous(n.breaks = 3, guide = guide_axis(n.dodge = 2)) +
   facet_wrap(vars(metric), scales = "free", ncol = 2) +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
       legend.position = "bottom") +
  labs(title = "Logical Feature Counts",
       fill = "Class",
       caption = "Data: Kaggle.com | Visual: Jim Gruman")
}

```

## Counts of Missingness
                  
```{r}
#| label: counts of missingness

naniar::gg_miss_upset(train_df,  nintersects = 6) 

naniar::vis_miss(train_df |> slice_sample(prop = 0.01))

train_df %>% 
  summarize(across(all_of(features), function(x) sum(is.na(x)))) %>% 
  pivot_longer(everything(),
              names_to = "feature",
              values_to = "Count of Missing") %>% 
                   knitr::kable()
                   

                  
```

## Counts of Distinct
                   
This dataset has quite a few unusual factor levels. And more important, there are factor levels in test that do not appear in train.
               
```{r}
#| label: counts of distinct
               
raw_df %>%
  summarize(across(all_of(features), n_distinct)) %>%
  pivot_longer(everything(), names_to = "feature", values_to = "Count of distinct train") |>
  left_join(
    tst_df %>%
      summarize(across(all_of(features), n_distinct)) %>%
      pivot_longer(everything(), names_to = "feature", values_to = "Count of distinct test")
  ) %>% 
                   knitr::kable()
               
```

## Duplicated

Is this competition transaction already in the training data with a correct label?

```{r}
#| label: duplicates
#| warning: false
#| message: false
all_df %>%
    select(all_of(features), source) %>% 
    group_by_at(features) %>%
    mutate(num_dups = n(),
           dup_id = row_number()) %>%
    ungroup() %>%
    group_by(source) %>%
    mutate(is_duplicated = dup_id > 1) %>%
    count(is_duplicated) %>% 
                   knitr::kable()
               

```
                   



## Target

```{r}
#| label: outcome 
#| warning: false
#| message: false
#| fig.width: 6


bundle_train %>% 
  summarize(outcome_sum = n(),
            .by = class) %>%
  arrange(desc(outcome_sum)) %>%
  mutate(prop = outcome_sum / nrow(bundle_train)) %>%
  mutate(ypos = cumsum(prop) - 0.5 * prop) %>%
  ggplot(aes(x = "", y = prop, fill = class)) +
  geom_bar(stat = "identity", width = 1, show.legend = FALSE) +
  geom_text(aes(y = ypos, label = paste0(class
                                  ,"\n",round(prop,2)*100,"%")),
            color = "white",
            nudge_x = 0.3,
            size = 3) +
  coord_polar("y", start = 0) +
  theme_void() + 
  labs(title = "Class",
       caption = "Data: Kaggle.com | Visual: Jim Gruman")

```
                              
           
                
# Machine Learning {.tabset .tabset-fade .tabset-pills}


## Recipe

```{r}
#| label: recipe
                   
rec <- recipe(
    
    formula(paste0("class ~ ", 
               str_c(features,  collapse = " + "))),
    data = bundle_train
  ) %>% 
  step_novel(all_nominal_predictors())  %>%
  textrecipes::step_tokenize(textstring, token = "characters") %>%
  textrecipes::step_tf(textstring)          
                   
                   
folds <- vfold_cv(bundle_train, 
                  v = 3,
                  repeats = 1,
                  strata = class)    
                   
ctrl <- finetune::control_sim_anneal(     
     verbose = FALSE,
     verbose_iter = TRUE,
     parallel_over = "everything",
     event_level = "second",
     save_pred = FALSE,
     save_workflow = FALSE)                   
                                     
```



## Lightgbm

```{r}
#| label: lgbm


boost_tree_lgbm_spec <- 
  boost_tree(
    trees = 100L,
   tree_depth = tune(),
   learn_rate =  tune(),
   min_n = tune(),
   loss_reduction = 0
  ) %>% 
  set_engine(engine = "lightgbm",
             is_unbalance = TRUE,
             num_leaves = tune(),
             num_threads = cores
             ) %>%
  set_mode(mode = "classification") 
                   
wf <- workflow(rec,
               boost_tree_lgbm_spec) 

param <- wf %>%
   extract_parameter_set_dials() %>%
   recipes::update(
      min_n = min_n(range = c(20,80)),
      tree_depth = tree_depth(range = c(4,30)),
      learn_rate = learn_rate(range = c(-0.8,-1.4)),
      num_leaves = num_leaves(range = c(200,700))
   ) %>%
   dials::finalize(raw_df)                 

burnin <- tune_grid(
  wf,
  grid = 4,
  resamples = folds,
  control = ctrl,
  metrics = metric_set(mcc, accuracy),
  param_info = param)

lgbm_rs <- finetune::tune_sim_anneal(
  wf,
  resamples = folds,
  iter = 8,
  initial = burnin,
  control = ctrl,
  metrics =  metric_set(mcc, accuracy),
  param_info = param) 

show_best(lgbm_rs, metric = "mcc")  

autoplot(lgbm_rs)

collect_metrics(lgbm_rs) %>% 
  filter(.metric == "mcc") %>% 
  mutate(.config = fct_reorder(.config, mean)) %>% 
  ggplot(aes(mean, .config)) +
  geom_point() +
  geom_errorbarh(aes(xmin = mean - std_err, xmax = mean + std_err)) +
  labs(title = "MCC across resample folds with std_err")
                   

```
                   
# Submission
                   
```{r}
#| label: submission
#| warning: false
#| message: false

highest_mcc <-   select_best(lgbm_rs, metric = "mcc")                 
                   
final_lgbm <- wf %>%
    finalize_workflow(highest_mcc) 

last_fit(
  final_lgbm,
  bundle_split,
  metrics = metric_set(mcc, accuracy)
) %>%
  collect_metrics() %>%
  knitr::kable()

classification_fit <- final_lgbm %>%
                        fit(bundle_train) 

submit_df <-  augment(classification_fit, competition_df, type = "response") %>%
       select(id, class = .pred_class)

head(submit_df)  %>% 
     knitr::kable()      

submit_df  %>% 
  write_csv("submission.csv")
```    