{"metadata":{"kernelspec":{"name":"ir","display_name":"R","language":"R"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.6.0","file_extension":".r","codemirror_mode":"r"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":84894,"databundleVersionId":9709193,"sourceType":"competition"}],"dockerImageVersionId":30749,"isInternetEnabled":true,"language":"rmarkdown","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/jimgruman/it-pays-to-discover?scriptVersionId=198981299\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"---\ntitle: \"Loan Approval\"\ndate: '`r Sys.Date()`'\noutput:\n  html_document:\n    number_sections: true\n    fig_caption: true\n    toc: true\n    fig_width: 7\n    fig_height: 4.5\n    theme: cosmo\n    highlight: tango\n    code_folding: hide\n---\n  \n# Introduction  {.tabset .tabset-fade .tabset-pills}\n\nThe goal of this competition is to build classification models to predict loan approvals.\n\nMy notebook serves as a demonstration of some of the possible techniques available to arrive at a solution.  I intend to add to this as I have time available. Your questions and comments are welcome.\n\nIf you fork this on kaggle, be sure to choose the kernel Environment setting for \"Always use latest environment\"\n\nLets dive right in.\n\nThe Kaggle kernels have many of the common r packages built in.  \n\n## Load libraries\n\nIn addition to `tidymodels` we will load the `bonsai` interface to lightgbm.\n\n```{r }\n#| label: setup\n#| warning: false\n#| message: false\n\nif (dir.exists(\"/kaggle\")){\n  path <- \"/kaggle/input/playground-series-s4e10/\"\n\noptions(repos = c(CRAN = \"https://packagemanager.posit.co/cran/2021-03-22\"))\n# install.packages(\"vip\", quiet = TRUE)\n    \ncores <- future::availableCores()\n\n} else {\n  path <- stringr::str_c(here::here(\"data\"),\"/\")\n\ncores <- future::availableCores(omit = 1)\n}\n\n \nsuppressPackageStartupMessages({\nlibrary(tidyverse, quietly = TRUE) # metapackage of all tidyverse packages\nlibrary(tidymodels) # metapackage see https://www.tidymodels.org/\nlibrary(bonsai)\n})\n\ntidymodels_prefer()\n\noptions(tidymodels.dark = TRUE)\n\ntheme_set(cowplot::theme_minimal_grid())\n\n```\n\n\n## Load Data\n\n```{r }\n#| label: load data\n#| warning: false\n#| message: false\n\n\ntrain_spec <- cols(\n  id = col_integer(),\n  person_age = col_integer(),\n  person_indome = col_integer(),\n  person_home_ownership = readr::col_character(),\n  person_emp_length = col_double(),\n  loan_intent = col_character(),\n  loan_grade = col_character(),\n  loan_amnt = col_integer(),\n  loan_int_rate = col_double(),\n  loan_percent_income = col_double(),\n  cb_person_default_on_file = col_character(),\n  cb_person_cred_hist_length = col_integer(),\n  loan_status = col_character()\n)\n\n\ncompetition_spec <- cols(\n  id = col_integer(),\n  person_age = col_integer(),\n  person_indome = col_integer(),\n  person_home_ownership = readr::col_character(),\n  person_emp_length = col_double(),\n  loan_intent = col_character(),\n  loan_grade = col_character(),\n  loan_amnt = col_integer(),\n  loan_int_rate = col_double(),\n  loan_percent_income = col_double(),\n  cb_person_default_on_file = col_character(),\n  cb_person_cred_hist_length = col_integer(),\n)\n\n\npreprocessor <- function(dataframe) {\n\ndataframe <- dataframe %>%\n    janitor::clean_names() %>%\n    \n    mutate(mismatch = loan_percent_income * person_income - loan_amnt) %>%\n    mutate(across(c(where(is.character)), ~ as.factor(.x))) \n\nreturn(dataframe)\n}\n\nraw_df <- read_csv(str_c(path, \"train.csv\"),\n                   col_types = train_spec,\n                   show_col_types = FALSE) %>%\n          preprocessor() \n\ntst_df <- read_csv(str_c(path, \"test.csv\"),\n                   col_types = competition_spec,\n                   show_col_types = FALSE)  %>% \n  preprocessor() \n\nall_df <-\n    bind_rows(raw_df %>% mutate(source = \"train\"),\n              tst_df %>% mutate(source = \"test\"))\n\ntrain_df <- all_df %>% \n  filter(source == \"train\") %>% \n  select(-source) \n\ncompetition_df <- all_df %>% \n  filter(source == \"test\") %>% \n  select(-source, -loan_status)\n\nfeatures <- train_df %>%\n  select(-id, -loan_status) %>%\n  names()\n\ntrain_df <- train_df %>% \n  distinct(pick(all_of(features)), .keep_all = TRUE)\n\nnom_features <- train_df %>%\n  select(all_of(features)) %>%\n  select(where(is.character), where(is.factor)) %>%\n  names() \n\nlogical_features <- train_df %>%\n  select(all_of(features)) %>%\n  select(where(is.logical)) %>%\n  names() \n\nnum_features <- train_df %>%\n  select(all_of(features)) %>%\n  select(where(is.numeric)) %>%\n  names()\n\n\n```\n\nNominal features:\n\n`r nom_features`\n\nNumeric features: \n\n`r num_features`\n\nLogical features: \n\n`r logical_features`\n\n\nSize of the combined train and competition datasets:\n\n`r nrow(all_df)`\n\nSize of the split made available to machine learning\n\n`r nrow(train_df)`\n\n\n# EDA {.tabset .tabset-fade .tabset-pills}\n\n## Numeric features\n\nConsider where features require univariate transformation, or clipping outliers.\n```{r}\n#| label: numeric\n#| warning: false\n#| message: false\n#| fig.height: 12\n#| fig.width: 6\n\ntrain_df %>% \n  select(all_of(num_features), loan_status ) %>% \n  pivot_longer(-loan_status,\n    names_to = \"metric\",\n    values_to = \"value\"\n  ) %>%\n  ggplot(aes(value, fill = loan_status)) +\n  geom_histogram(show.legend = FALSE, bins = 200) +\n   facet_wrap(vars(metric), scales = \"free\", ncol = 1) +\n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        plot.title.position = \"plot\") +\n  labs(color = NULL, fill = \"Loan Status\",\n       title = \"Numeric Feature Univariate Distributions\",\n       caption = \"Data: Kaggle.com | Visual: Jim Gruman\")\n\n```\n\n\n## Nominal features\n\nExplore the distribution of outcome class by factor level, and the factor levels that exist in test that do not exist in training.\n\n\n```{r}\n#| label: nominal\n#| warning: false\n#| message: false\n#| fig.height: 6\n#| fig.width: 6\n\n\nif(length(nom_features) >0){\n\nall_df %>% \n  select(all_of(nom_features), loan_status) %>% \n  mutate(across(nom_features, fct_lump_n,n = 10, other_level = 'other')) %>%\n  pivot_longer(-loan_status,\n    names_to = \"metric\",\n    values_to = \"value\"\n  ) %>%\n  \n  summarise(n = n(),\n            .by = c(loan_status, metric, value)) %>%\n      \n  mutate(value = tidytext::reorder_within(value, n, metric)) %>%\n    \n  ggplot(aes(x = n, y = value, fill = loan_status)) +\n  geom_col() +\n  tidytext::scale_y_reordered() +\n  scale_x_continuous(n.breaks = 3, guide = guide_axis(n.dodge = 2))  +\n  facet_wrap(vars(metric), scales = \"free\", ncol = 2) +\n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n       legend.position = \"bottom\") +\n  labs(title = \"Nominal Feature Counts\",\n       fill = \"Loan Status\", y = NULL,\n       caption = \"Data: Kaggle.com | Visual: Jim Gruman\")\n\n}\n\n```\n\n## Logical features\n\n```{r}\n#| label: logical\n#| warning: false\n#| message: false\n#| fig.height: 6\n#| fig.width: 6\n\n\nif(length(logical_features) >0){\n\ntrain_df %>% \n  select(all_of(logical_features), class) %>% \n  pivot_longer(-class,\n    names_to = \"metric\",\n    values_to = \"value\"\n  ) %>%\n  ggplot(aes(y = value, fill = class)) +\n  geom_bar() +\n  scale_x_continuous(n.breaks = 3, guide = guide_axis(n.dodge = 2)) +\n   facet_wrap(vars(metric), scales = \"free\", ncol = 2) +\n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n       legend.position = \"bottom\") +\n  labs(title = \"Logical Feature Counts\",\n       fill = \"Class\",\n       caption = \"Data: Kaggle.com | Visual: Jim Gruman\")\n}\n\n```\n\n## Counts of Missingness\n                  \n```{r}\n#| label: counts of missingness\n\ntrain_df %>% \n  summarize(across(all_of(features), function(x) sum(is.na(x)))) %>% \n  pivot_longer(everything(),\n              names_to = \"feature\",\n              values_to = \"Count of Missing\") %>% \n                   knitr::kable()\n                   \n\n                  \n```\n\n## Counts of Distinct\n                   \nThis dataset has quite a few unusual factor levels. And more important, there are factor levels in test that do not appear in train.\n               \n```{r}\n#| label: counts of distinct\n               \ntrain_df %>%\n  summarize(across(all_of(features), n_distinct)) %>%\n  pivot_longer(everything(), names_to = \"feature\", values_to = \"Count of distinct train\") |>\n  left_join(\n    tst_df %>%\n      summarize(across(all_of(features), n_distinct)) %>%\n      pivot_longer(everything(), names_to = \"feature\", values_to = \"Count of distinct test\")\n  ) %>% \n                   knitr::kable()\n               \n```\n\n## Duplicated\n\nIs this competition transaction already in the training data with a correct label?\n\n```{r}\n#| label: duplicates\n#| warning: false\n#| message: false\nall_df %>%\n    group_by_at(features) %>%\n    mutate(num_dups = n(),\n           dup_id = row_number()) %>% \n    ungroup() %>%\n    group_by(source) %>%\n    mutate(is_duplicated = dup_id > 1) %>% \n    count(is_duplicated) %>% \n                   knitr::kable()\n               \n\n```\n                   \n\n\n\n## Target\n\n```{r}\n#| label: outcome \n#| warning: false\n#| message: false\n#| fig.width: 6\n\n\ntrain_df %>% \n  summarize(outcome_sum = n(),\n            .by = loan_status) %>%\n  arrange(outcome_sum) %>%\n  mutate(prop = outcome_sum / nrow(train_df)) %>%\n  mutate(ypos = cumsum(prop) - 0.5 * prop) %>%\n  ggplot(aes(x = \"\", y = prop, fill = loan_status)) +\n  geom_bar(stat = \"identity\", width = 1, show.legend = FALSE) +\n  geom_text(aes(y = ypos, label = paste0(loan_status\n                                  ,\"\\n\",round(prop,2)*100,\"%\")),\n            color = \"white\",\n            nudge_x = 0,\n            size = 3) +\n  coord_polar(\"y\", start = 0) +\n  theme_void() + \n  labs(title = \"Loan Status\",\n       caption = \"Data: Kaggle.com | Visual: Jim Gruman\")\n\n```\n                              \n           \n                \n# Machine Learning {.tabset .tabset-fade .tabset-pills}\n\n\n## Recipe\n\n```{r}\n#| label: recipe\n                   \nrec <- recipe(\n    \n    formula(paste0(\"loan_status ~ \", \n               str_c(features,  collapse = \" + \"))),\n    data = train_df\n  ) %>% \n  step_novel(all_nominal_predictors())  %>%\n  step_other(all_nominal_predictors())\n                   \n                   \nfolds <- vfold_cv(train_df, \n                  v = 7,\n                  repeats = 2,\n                  strata = loan_status)    \n                   \nctrl <- finetune::control_sim_anneal(     \n     verbose = FALSE,\n     verbose_iter = TRUE,\n     parallel_over = \"everything\",\n     event_level = \"second\",\n     save_pred = FALSE,\n     save_workflow = FALSE)                   \n                                     \n```\n\n\n\n## Lightgbm\n\n```{r}\n#| label: lgbm\n#| warning: false\n#| message: false\n#| fig.width: 6\n\nboost_tree_lgbm_spec <- \n  boost_tree(\n    trees = 1000L,\n   tree_depth = tune(),\n   learn_rate =  tune(),\n   min_n = tune(),\n#   mtry = tune(),\n   loss_reduction = 0\n  ) %>% \n  set_engine(engine = \"lightgbm\",\n             is_unbalance = TRUE,\n             num_leaves = tune(),\n             num_threads = cores\n             ) %>%\n  set_mode(mode = \"classification\") \n                   \nwf <- workflow(rec,\n               boost_tree_lgbm_spec) \n\nparam <- wf %>%\n   extract_parameter_set_dials() %>%\n   recipes::update(\n      min_n = min_n(range = c(70,130)),\n      tree_depth = tree_depth(range = c(4,30)),\n      learn_rate = learn_rate(range = c(-1.0,-2.1)),\n      num_leaves = num_leaves(range = c(200,700))\n   ) %>%\n   dials::finalize(raw_df)                 \n\nburnin <- tune_grid(\n  wf,\n  grid = 4,\n  resamples = folds,\n  control = ctrl,\n  metrics = metric_set(roc_auc, accuracy),\n  param_info = param)\n\nlgbm_rs <- finetune::tune_sim_anneal(\n  wf,\n  resamples = folds,\n  iter = 7,\n  initial = burnin,\n  control = ctrl,\n  metrics =  metric_set(roc_auc, accuracy),\n  param_info = param) \n\nshow_best(lgbm_rs, metric = \"roc_auc\")  \n\nautoplot(lgbm_rs)\n\ncollect_metrics(lgbm_rs) %>% \n  filter(.metric == \"roc_auc\") %>% \n  mutate(.config = fct_reorder(.config, mean)) %>% \n  ggplot(aes(mean, .config)) +\n  geom_point() +\n  geom_errorbarh(aes(xmin = mean - std_err, xmax = mean + std_err)) +\n  labs(title = \"ROC across resample folds with std_err\")\n                   \n\n```\n                   \n# Submission\n                   \n```{r}\n#| label: submission\n#| warning: false\n#| message: false\n\nhighest_roc_auc <-   select_best(lgbm_rs, metric = \"roc_auc\")                 \n                   \nfinal_lgbm <- wf %>%\n    finalize_workflow(highest_roc_auc) \n\nclassification_fit <- final_lgbm %>%\n                        fit(train_df) \n\nclassification_fit |> \n  extract_fit_engine() |> \n  lgb.importance() |> \n  lightgbm::lgb.plot.importance(top_n = 30)\n\nsubmit_df <-  augment(classification_fit, competition_df) %>%\n       select(id, class = .pred_1)\n\nhead(submit_df)  %>% \n     knitr::kable()      \n\nsubmit_df  %>% \n  write_csv(\"submission.csv\")\n```   ","metadata":{"_uuid":"4dfd3c2a-812f-4f34-964e-018c7f4c1371","_cell_guid":"8a7e1abe-352b-479f-8647-7f655855f77d","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}